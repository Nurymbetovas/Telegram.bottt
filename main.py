import logging
from telegram import (
    ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup, Update
)
from telegram.ext import (
    Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, CallbackContext,
    ChatJoinRequestHandler  # –î–æ–±–∞–≤–ª—è–µ–º —ç—Ç–æ—Ç –∏–º–ø–æ—Ä—Ç
)
from telegram.error import BadRequest
from telegram.constants import ChatMemberStatus
import sqlite3

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = '7646042819:AAHtreDM-z6Ffrndi7vWjVE0J7x_w-RGymc'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω
GROUP_ID = -1002370108034  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã
ADMIN_ID = 802344099  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à ID

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    """–°–æ–∑–¥–∞–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Å–ø–∏—Å–∫–∞ –æ–∂–∏–¥–∞–Ω–∏—è."""
    conn = sqlite3.connect('queue.db')
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS waiting_list (
            user_id INTEGER PRIMARY KEY,
            username TEXT,
            position INTEGER,
            timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    conn.commit()
    conn.close()

init_db()

async def check_membership(user_id, context):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –≥—Ä—É–ø–ø—ã."""
    try:
        member = await context.bot.get_chat_member(GROUP_ID, user_id)
        return member.status in [ChatMemberStatus.MEMBER, ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.OWNER]
    except BadRequest:
        return False

async def check_banned_in_group(user_id, context):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ –≥—Ä—É–ø–ø—ã (–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω)."""
    try:
        member = await context.bot.get_chat_member(GROUP_ID, user_id)
        return member.status == ChatMemberStatus.BANNED
    except BadRequest:
        return False

async def start(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start."""
    logger.info("–§—É–Ω–∫—Ü–∏—è start –≤—ã–∑–≤–∞–Ω–∞")  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    if update.message.chat.type != 'private':
        return

    user_id = update.message.from_user.id

    keyboard = [
        [KeyboardButton("–°—ñ–ª—Ç–µ–º–µ"), KeyboardButton("–ö—ñ—Ä–µ –∞–ª–º–∞–¥—ã–º")],
        [KeyboardButton("A–Ω–æ–Ω")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "–°”ô–ª–µ–º! –¢–æ–ø“õ–∞ 100 –∞–¥–∞–º “ì–∞–Ω–∞ –∫—ñ—Ä–µ –∞–ª–∞–¥—ã. –ö—ñ—Ä—É “Ø—à—ñ–Ω –°—ñ–ª—Ç–µ–º–µ –±–∞—Ç—ã—Ä–º–∞—Å—ã–Ω –±–∞—Å.",  # –ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç
        reply_markup=reply_markup
    )

async def get_group_members_count(context: CallbackContext):
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã."""
    try:
        members_count = await context.bot.get_chat_member_count(GROUP_ID)
        return members_count
    except BadRequest as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã: {e}")
        return 0

async def handle_siltheme(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–°—ñ–ª—Ç–µ–º–µ"."""
    logger.info(f"–ö–Ω–æ–ø–∫–∞ '–°—ñ–ª—Ç–µ–º–µ' –Ω–∞–∂–∞—Ç–∞. –¢–µ–∫—Å—Ç: {update.message.text}")  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    user_id = update.message.from_user.id
    username = update.message.from_user.username or update.message.from_user.first_name

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –≥—Ä—É–ø–ø—ã
    is_member = await check_membership(user_id, context)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤ –≥—Ä—É–ø–ø–µ: {is_member}")  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    if is_member:
        await update.message.reply_text("–°—ñ–∑ —Ç–æ–ø—Ç–∞ –±–∞—Ä—Å—ã–∑ü•∞")
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã
        members_count = await get_group_members_count(context)
        logger.info(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã: {members_count}")  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        if members_count >= 100:
            # –ï—Å–ª–∏ –≥—Ä—É–ø–ø–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞, –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞–Ω–∏—è
            conn = sqlite3.connect('queue.db')
            cursor = conn.cursor()
            cursor.execute('SELECT COUNT(*) FROM waiting_list')
            position = cursor.fetchone()[0] + 1  # –ü–æ–∑–∏—Ü–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏
            cursor.execute('''
                INSERT INTO waiting_list (user_id, username, position)
                VALUES (?, ?, ?)
            ''', (user_id, username, position))
            conn.commit()
            conn.close()
            await update.message.reply_text(
                f"“ö–∞–∑—ñ—Ä —Ç–æ–ø—Ç–∞ –±–æ—Å –æ—Ä—ã–Ω –∂–æ“õ, –±—ñ—Ä–∞“õ –±—ñ–∑ —Å—ñ–∑–¥—ñ –ö“Ø—Ç—É —Ç—ñ–∑—ñ–º—ñ–Ω–µ –µ–Ω–≥—ñ–∑–¥—ñ–∫. –°—ñ–∑ “õ–∞–∑—ñ—Ä {position}-–æ—Ä—ã–Ω–¥–∞—Å—ã–∑. –°—ñ–∑–¥—ñ“£ –∫–µ–∑–µ–≥—ñ“£—ñ–∑ –∫–µ–ª–≥–µ–Ω–¥–µ —Ö–∞–±–∞—Ä –±–µ—Ä–µ–º—ñ–∑."
            )
        else:
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–µ –º–µ—Å—Ç–∞, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è
            await update.message.reply_text(
                "–ë—ñ–∑–¥—ñ“£ —Ç–æ–ø“õ–∞ 100 –∞–¥–∞–º “ì–∞–Ω–∞ “õ–æ—Å—ã–ª–∞ –∞–ª–∞–¥—ã. –¢–æ–ø“õ–∞ “õ–æ—Å—ã–ª—É “Ø—à—ñ–Ω —Ç”©–º–µ–Ω–¥–µ–≥—ñ –±–∞—Ç—ã—Ä–º–∞–Ω—ã –±–∞—Å—ã“£—ã–∑.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("“ö–æ—Å—ã–ª—É", url="https://t.me/+UKfP2S6RKJw1YTMy")]
                ])
            )

async def handle_queue(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É '–ö–µ–∑–µ–∫'."""
    user_id = update.message.from_user.id
    conn = sqlite3.connect('queue.db')
    cursor = conn.cursor()
    cursor.execute('SELECT position FROM waiting_list WHERE user_id = ?', (user_id,))
    result = cursor.fetchone()
    conn.close()
    if result:
        await update.message.reply_text(f"–°—ñ–∑ “õ–∞–∑—ñ—Ä {result[0]}-–æ—Ä—ã–Ω–¥–∞ —Ç“±—Ä—Å—ã–∑. –û—Ä—ã–Ω –±–æ—Å–∞“ì–∞–Ω–¥–∞ —Å—ñ–∑–≥–µ —Ö–∞–±–∞—Ä–ª–∞–º–∞ –∂—ñ–±–µ—Ä–µ–º—ñ–∑.")
    else:
        await update.message.reply_text("–°—ñ–∑ –∫–µ–∑–µ–∫—Ç–µ –µ–º–µ—Å—Å—ñ–∑.")

async def edit_message_and_remove_button(context: CallbackContext, user_id: int, message_id: int):
    """–ò–∑–º–µ–Ω—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —É–¥–∞–ª—è–µ—Ç –∫–Ω–æ–ø–∫—É."""
    try:
        await context.bot.edit_message_text(
            chat_id=user_id,
            message_id=message_id,
            text="–°—ñ–∑–¥—ñ“£ —É–∞“õ—ã—Ç—ã“£—ã–∑ –∞—è“õ—Ç–∞–ª–¥—ã, –∫–µ–∑–µ–≥—ñ“£—ñ–∑ —Å—ñ–∑–¥–µ–Ω –∫–µ–π—ñ–Ω–≥—ñ –∞–¥–∞–º“ì–∞ –±–µ—Ä—ñ–ª–¥—ñ."
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

async def notify_first_in_queue(context: CallbackContext):
    """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ—á–µ—Ä–µ–¥–∏."""
    conn = sqlite3.connect('queue.db')
    cursor = conn.cursor()
    cursor.execute('SELECT user_id, username FROM waiting_list ORDER BY position LIMIT 1')
    result = cursor.fetchone()
    if result:
        user_id, username = result
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
            message = await context.bot.send_message(
                user_id,
                "üéâ –û—Ä—ã–Ω –±–æ—Å–∞–¥—ã. –°—ñ–∑–¥—ñ“£ 1 —Å–∞“ì–∞—Ç —É–∞“õ—ã—Ç—ã“£—ã–∑ –±–∞—Ä. 1 —Å–∞“ì–∞—Ç —ñ—à—ñ–Ω–¥–µ –∫—ñ—Ä–º–µ—Å–µ“£—ñ–∑, –∫–µ–∑–µ–≥—ñ“£—ñ–∑ –∫–µ–ª–µ—Å—ñ –∞–¥–∞–º“ì–∞ –±–µ—Ä—ñ–ª–µ–¥—ñ.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("“ö–æ—Å—ã–ª—É", url="https://t.me/+UKfP2S6RKJw1YTMy")]
                ])
            )
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –Ω–∞ 1 —á–∞—Å
            context.job_queue.run_once(
                remove_from_queue, 
                3600, 
                user_id=user_id, 
                message_id=message.message_id
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

async def remove_from_queue(context: CallbackContext):
    """–£–¥–∞–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –∏ –∏–∑–º–µ–Ω—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    user_id = context.job.user_id
    message_id = context.job.message_id

    # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏
    conn = sqlite3.connect('queue.db')
    cursor = conn.cursor()
    cursor.execute('DELETE FROM waiting_list WHERE user_id = ?', (user_id,))
    conn.commit()
    conn.close()

    # –ò–∑–º–µ–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —É–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫—É
    await edit_message_and_remove_button(context, user_id, message_id)

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await context.bot.send_message(
            user_id,
            "–°—ñ–∑–¥—ñ“£ —É–∞“õ—ã—Ç—ã“£—ã–∑ –∞—è“õ—Ç–∞–ª–¥—ã, –∫–µ–∑–µ–≥—ñ“£—ñ–∑ —Å—ñ–∑–¥–µ–Ω –∫–µ–π—ñ–Ω–≥—ñ –∞–¥–∞–º“ì–∞ –±–µ—Ä—ñ–ª–¥—ñ."
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

async def handle_anon(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "A–Ω–æ–Ω"."""
    user_id = update.message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –≥—Ä—É–ø–ø—ã
    is_member = await check_membership(user_id, context)
    if is_member:
        keyboard = [[KeyboardButton("–ê—Ä—Ç“õ–∞")]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(
            "–û—Å—ã –∂–µ—Ä–≥–µ –∞–Ω–æ–Ω–∏–º–¥—ñ —Ö–∞–±–∞—Ä–ª–∞–º–∞ “õ–∞–ª–¥—ã“£—Å–∞“£ –±–æ–ª–∞–¥—ã. –ê—Ç—ã“£, —é–∑–µ—Ä –µ—à—Ç–µ“£–µ –∫”©—Ä—ñ–Ω–±–µ–π–¥—ñ, —Ç–µ–∫ —Ö–∞–±–∞—Ä–ª–∞–º–∞ —Ç–æ–ø“õ–∞ –±–æ—Ç—Ç—ã“£ –∞—Ç—ã–Ω–∞–Ω –±–∞—Ä–∞–¥—ã.",
            reply_markup=reply_markup
        )
        context.user_data["anon_mode"] = True  # –í–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –≥—Ä—É–ø–ø–µ, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å
        keyboard = [
            [InlineKeyboardButton("–¢–æ–ø“õ–∞ –∫—ñ—Ä—ñ“£—ñ–∑", url="https://t.me/+UKfP2S6RKJw1YTMy")],
            [InlineKeyboardButton("–¢–µ–∫—Å–µ—Ä—É", callback_data="check_membership")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            "–ê–Ω–æ–Ω–∏–º–¥—ñ —Ö–∞–±–∞—Ä–ª–∞–º–∞–Ω—ã —Ç–æ–ø—Ç–∞ –±–∞—Ä –∞–¥–∞–º “ì–∞–Ω–∞ –∂–∞–∑–∞ –∞–ª–∞–¥—ã. –¢–æ–ø“õ–∞ –∫—ñ—Ä—ñ–ø, '–¢–µ–∫—Å–µ—Ä—É' –±–∞—Ç—ã—Ä–º–∞—Å—ã–Ω –±–∞—Å—ã“£—ã–∑.",
            reply_markup=reply_markup
        )
        context.user_data["waiting_for_check"] = True  # –û–∂–∏–¥–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏

async def handle_back(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–ê—Ä—Ç“õ–∞"."""
    user_id = update.message.from_user.id

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    keyboard = [
        [KeyboardButton("–°—ñ–ª—Ç–µ–º–µ"), KeyboardButton("–ö—ñ—Ä–µ –∞–ª–º–∞–¥—ã–º")],
        [KeyboardButton("A–Ω–æ–Ω")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "–°—ñ–∑ –Ω–µ–≥—ñ–∑–≥—ñ –º”ô–∑—ñ—Ä–≥–µ “õ–∞–π—Ç—Ç—ã“£—ã–∑.",
        reply_markup=reply_markup
    )
    context.user_data.clear()  # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

async def handle_anon_message(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞–Ω–æ–Ω–∏–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è."""
    if update.message.chat.type != 'private':
        return

    user_id = update.message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω –ª–∏ —Ä–µ–∂–∏–º –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    if not context.user_data.get("anon_mode", False):
        return

    sent_message = None

    # –ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –º–µ–¥–∏–∞
    if update.message.text:
        sent_message = await context.bot.send_message(GROUP_ID, f"üîπ *–ê–Ω–æ–Ω–∏–º–¥—ñ —Ö–∞–±–∞—Ä–ª–∞–º–∞:*\n{update.message.text}", parse_mode="Markdown")
    elif update.message.voice:
        sent_message = await context.bot.send_voice(GROUP_ID, update.message.voice.file_id, caption="üîπ *–ê–Ω–æ–Ω–∏–º–¥—ñ –≥–æ–ª–æ—Å–æ–≤–æ–µ:*", parse_mode="Markdown")
    elif update.message.photo:
        sent_message = await context.bot.send_photo(GROUP_ID, update.message.photo[-1].file_id, caption="üîπ *–ê–Ω–æ–Ω–∏–º–¥—ñ —Ñ–æ—Ç–æ:*", parse_mode="Markdown")
    elif update.message.video:
        sent_message = await context.bot.send_video(GROUP_ID, update.message.video.file_id, caption="üîπ *–ê–Ω–æ–Ω–∏–º–¥—ñ –≤–∏–¥–µ–æ:*", parse_mode="Markdown")
    elif update.message.document:
        sent_message = await context.bot.send_document(GROUP_ID, update.message.document.file_id, caption="üîπ *–ê–Ω–æ–Ω–∏–º–¥—ñ “õ“±–∂–∞—Ç:*", parse_mode="Markdown")
    elif update.message.animation:
        sent_message = await context.bot.send_animation(GROUP_ID, update.message.animation.file_id, caption="üîπ *–ê–Ω–æ–Ω–∏–º–¥—ñ –∞–Ω–∏–º–∞—Ü–∏—è:*", parse_mode="Markdown")
    elif update.message.sticker:
        sent_message = await context.bot.send_sticker(GROUP_ID, update.message.sticker.file_id)
    elif update.message.video_note:
        sent_message = await context.bot.send_video_note(GROUP_ID, update.message.video_note.file_id)
    else:
        await update.message.reply_text("–ë“±–ª —Ç–∏–ø—Ç–µ–≥—ñ —Ö–∞–±–∞—Ä–ª–∞–º–∞–Ω—ã ”©“£–¥–µ—É –º“Ø–º–∫—ñ–Ω –µ–º–µ—Å.")
        return

    if sent_message:
        group_message_link = f"https://t.me/c/{str(GROUP_ID)[4:]}/{sent_message.message_id}"
        sender_link = f"[–ñ—ñ–±–µ—Ä—É—à—ñ](tg://openmessage?user_id={user_id})"

        admin_text = f"üîî *–ñ–∞“£–∞ –∞–Ω–æ–Ω–∏–º–¥—ñ —Ö–∞–±–∞—Ä–ª–∞–º–∞:*\n{update.message.text if update.message.text else 'üìé –ú–µ–¥–∏–∞ —Ñ–∞–π–ª'}\n\n{sender_link}\n[–•–∞–±–∞—Ä–ª–∞–º–∞ —Å—ñ–ª—Ç–µ–º–µ—Å—ñ]({group_message_link})"

        await context.bot.send_message(ADMIN_ID, text=admin_text, parse_mode="Markdown")
        await update.message.reply_text("–°—ñ–∑ —Ç–∞“ì—ã –∞–Ω–æ–Ω–∏–º–¥—ñ —Ö–∞–±–∞—Ä–ª–∞–º–∞ –∂–∞–∑–∞ –∞–ª–∞—Å—ã–∑ –Ω–µ–º–µ—Å–µ '–ê—Ä—Ç“õ–∞' –±–∞—Ç—ã—Ä–º–∞—Å—ã–Ω –±–∞—Å—ã–ø –Ω–µ–≥—ñ–∑–≥—ñ –º”ô–∑—ñ—Ä–≥–µ –æ—Ä–∞–ª—ã“£—ã–∑.")

async def handle_cannot_join(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–ö—ñ—Ä–µ –∞–ª–º–∞–¥—ã–º"."""
    user_id = update.message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ –≥—Ä—É–ø–ø—ã
    is_banned = await check_banned_in_group(user_id, context)
    if is_banned:
        keyboard = [[InlineKeyboardButton("–®—ã“ì—É", callback_data=f"request_unban_{user_id}")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            "–°—ñ–∑ “õ–∞—Ä–∞ —Ç—ñ–∑—ñ–º–¥–µ —Ç“±—Ä“ì–∞–Ω–¥—ã“õ—Ç–∞–Ω —Å—ñ–ª—Ç–µ–º–µ –∞—Ä“õ—ã–ª—ã –∫—ñ—Ä–µ –∞–ª–º–∞–π –∂–∞—Ç—ã—Ä—Å—ã–∑. “ö–∞—Ä–∞ —Ç—ñ–∑—ñ–º–Ω–µ–Ω —à—ã“õ“õ—ã“£—ã–∑ –∫–µ–ª–µ–¥—ñ –º–µ?",
            reply_markup=reply_markup
        )
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è
        keyboard = [[InlineKeyboardButton("–ö—ñ—Ä—ñ“£—ñ–∑", url="https://t.me/+UKfP2S6RKJw1YTMy")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            "–°—ñ–∑ “õ–∞—Ä–∞ —Ç—ñ–∑—ñ–º–¥–µ –∂–æ“õ—Å—ã–∑, —Å—ñ–ª—Ç–µ–º–µ –∞—Ä“õ—ã–ª—ã –∫—ñ—Ä—ñ“£—ñ–∑.",
            reply_markup=reply_markup
        )

async def handle_exit_request(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≤—ã—Ö–æ–¥ –∏–∑ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞."""
    query = update.callback_query
    await query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏

    user_id = int(query.data.split("_")[-1])  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
    await query.edit_message_text("–°—ñ–∑–¥—ñ“£ ”©—Ç—ñ–Ω—ñ—à—ñ“£—ñ–∑ –∂—ñ–±–µ—Ä—ñ–ª–¥—ñ. –ñ–∞—É–∞–ø –∫“Ø—Ç—ñ“£—ñ–∑.")

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user = await context.bot.get_chat(user_id)
    user_name = user.first_name or "–ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã"
    user_username = f"@{user.username}" if user.username else "—é–∑–µ—Ä–Ω–µ–π–º –∂–æ“õ"

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º HTML-—Ä–∞–∑–º–µ—Ç–∫—É
    user_link = f'<a href="tg://user?id={user_id}">{user_name}</a>'

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞
    keyboard = [
        [InlineKeyboardButton("“ö–∞–±—ã–ª–¥–∞—É", callback_data=f"accept_unban_{user_id}")],
        [InlineKeyboardButton("“ö–∞–±—ã–ª–¥–∞–º–∞—É", callback_data=f"deny_unban_{user_id}")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É –∑–∞–ø—Ä–æ—Å —Å HTML-—Ä–∞–∑–º–µ—Ç–∫–æ–π
    try:
        await context.bot.send_message(
            ADMIN_ID,
            f"üîî {user_link} ({user_username}) “õ–∞—Ä–∞ —Ç—ñ–∑—ñ–º–Ω–µ–Ω —à—ã“ì—É“ì–∞ ”©—Ç—ñ–Ω—ñ—à –∂—ñ–±–µ—Ä–¥—ñ.",
            parse_mode="HTML",
            reply_markup=reply_markup
        )
    except Exception as e:
        logger.error(f"“ö–∞—Ç–µ ADMIN_ID-–≥–µ —Ö–∞–±–∞—Ä–ª–∞–º–∞ –∂—ñ–±–µ—Ä—É–¥–µ: {e}")

async def handle_admin_decision(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ—à–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É –Ω–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫—É."""
    query = update.callback_query
    await query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏

    action, user_id = query.data.rsplit("_", 1)
    user_id = int(user_id)

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user = await context.bot.get_chat(user_id)
    user_name = user.first_name or "–ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã"
    user_username = f"@{user.username}" if user.username else "—é–∑–µ—Ä–Ω–µ–π–º –∂–æ“õ"

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º HTML-—Ä–∞–∑–º–µ—Ç–∫—É
    user_link = f'<a href="tg://user?id={user_id}">{user_name}</a>'

    if action == "accept_unban":
        # –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø–µ
        await context.bot.unban_chat_member(GROUP_ID, user_id)
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await context.bot.send_message(
            user_id,
            "–°—ñ–∑–¥—ñ“£ ”©—Ç—ñ–Ω—ñ—à—ñ“£—ñ–∑ “õ–∞–±—ã–ª–¥–∞–Ω–¥—ã, —Å—ñ–ª—Ç–µ–º–µ –∞—Ä“õ—ã–ª—ã –∫—ñ—Ä–µ –∞–ª–∞—Å—ã–∑.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ö—ñ—Ä—ñ“£—ñ–∑", url="https://t.me/+UKfP2S6RKJw1YTMy")]])
        )
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        await context.bot.send_message(
            ADMIN_ID,
            f"{user_link} “õ–∞—Ä–∞ —Ç—ñ–∑—ñ–º–Ω–µ–Ω –∞–ª—ã–Ω–¥—ã.",
            parse_mode="HTML"
        )
    elif action == "deny_unban":
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await context.bot.send_message(user_id, "–°—ñ–∑–¥—ñ“£ ”©—Ç—ñ–Ω—ñ—à—ñ“£—ñ–∑ “õ–∞–±—ã–ª–¥–∞–Ω–±–∞–¥—ã.")
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        await context.bot.send_message(
            ADMIN_ID,
            f"{user_link} “õ–∞—Ä–∞ —Ç—ñ–∑—ñ–º–Ω–µ–Ω –∞–ª—ã–Ω–±–∞–¥—ã.",
            parse_mode="HTML"
        )

    # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏, –æ—Å—Ç–∞–≤–ª—è—è —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    await query.edit_message_reply_markup(reply_markup=None)

async def handle_check_membership(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–¢–µ–∫—Å–µ—Ä—É"."""
    query = update.callback_query
    await query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏

    user_id = query.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –≥—Ä—É–ø–ø—ã
    is_member = await check_membership(user_id, context)
    if is_member:
        await query.edit_message_text("–°—ñ–∑ —Ç–æ–ø—Ç–∞—Å—ã–∑! –ê–Ω–æ–Ω–∏–º–¥—ñ —Ö–∞–±–∞—Ä–ª–∞–º–∞ –∂–∞–∑–∞ –∞–ª–∞—Å—ã–∑.")
    else:
        await query.edit_message_text("–°—ñ–∑ ”ô–ª—ñ —Ç–æ–ø—Ç–∞ –µ–º–µ—Å—Å—ñ–∑. –¢–æ–ø“õ–∞ –∫—ñ—Ä—ñ“£—ñ–∑.")

from telegram import Update
from telegram.ext import Application, ChatJoinRequestHandler

async def handle_chat_join_request(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É."""
    user_id = update.chat_join_request.from_user.id
    chat_id = update.chat_join_request.chat.id

    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–Ω–∏–º–∞–µ–º –∑–∞—è–≤–∫—É
    try:
        await context.bot.approve_chat_join_request(chat_id, user_id)
        logger.info(f"–ó–∞—è–≤–∫–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø—Ä–∏–Ω—è—Ç–∞.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞—è–≤–∫–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    application = Application.builder().token(TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & filters.Regex("^–°—ñ–ª—Ç–µ–º–µ$"), handle_siltheme))
    application.add_handler(MessageHandler(filters.TEXT & filters.Regex("(?i)^–∫–µ–∑–µ–∫$"), handle_queue))  # –ö–æ–º–∞–Ω–¥–∞ "–ö–µ–∑–µ–∫"
    application.add_handler(MessageHandler(filters.TEXT & filters.Regex("^–ö—ñ—Ä–µ –∞–ª–º–∞–¥—ã–º$"), handle_cannot_join))
    application.add_handler(MessageHandler(filters.TEXT & filters.Regex("^A–Ω–æ–Ω$"), handle_anon))
    application.add_handler(MessageHandler(filters.TEXT & filters.Regex("^–ê—Ä—Ç“õ–∞$"), handle_back))
    application.add_handler(MessageHandler(filters.ALL & ~filters.COMMAND, handle_anon_message))
    application.add_handler(CallbackQueryHandler(handle_exit_request, pattern="^request_unban_"))
    application.add_handler(CallbackQueryHandler(handle_admin_decision, pattern="^(accept_unban|deny_unban)_"))
    application.add_handler(CallbackQueryHandler(handle_check_membership, pattern="^check_membership$"))

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
    application.add_handler(ChatJoinRequestHandler(handle_chat_join_request))

    # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—á–µ—Ä–µ–¥–∏
    job_queue = application.job_queue
    job_queue.run_repeating(notify_first_in_queue, interval=60.0, first=0.0)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

if __name__ == "__main__":
    main()
